// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/degenerat3/meteor/meteor/core/ent/action"
	"github.com/degenerat3/meteor/meteor/core/ent/bot"
	"github.com/degenerat3/meteor/meteor/core/ent/group"
	"github.com/degenerat3/meteor/meteor/core/ent/host"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAction = "Action"
	TypeBot    = "Bot"
	TypeGroup  = "Group"
	TypeHost   = "Host"
)

// ActionMutation represents an operation that mutate the Actions
// nodes in the graph.
type ActionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	uuid             *string
	mode             *string
	args             *string
	queued           *bool
	responded        *bool
	result           *string
	clearedFields    map[string]struct{}
	targeting        map[int]struct{}
	removedtargeting map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Action, error)
}

var _ ent.Mutation = (*ActionMutation)(nil)

// actionOption allows to manage the mutation configuration using functional options.
type actionOption func(*ActionMutation)

// newActionMutation creates new mutation for $n.Name.
func newActionMutation(c config, op Op, opts ...actionOption) *ActionMutation {
	m := &ActionMutation{
		config:        c,
		op:            op,
		typ:           TypeAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionID sets the id field of the mutation.
func withActionID(id int) actionOption {
	return func(m *ActionMutation) {
		var (
			err   error
			once  sync.Once
			value *Action
		)
		m.oldValue = func(ctx context.Context) (*Action, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Action.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAction sets the old Action of the mutation.
func withAction(node *Action) actionOption {
	return func(m *ActionMutation) {
		m.oldValue = func(context.Context) (*Action, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ActionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUUID sets the uuid field.
func (m *ActionMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the uuid value in the mutation.
func (m *ActionMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old uuid value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUUID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID reset all changes of the "uuid" field.
func (m *ActionMutation) ResetUUID() {
	m.uuid = nil
}

// SetMode sets the mode field.
func (m *ActionMutation) SetMode(s string) {
	m.mode = &s
}

// Mode returns the mode value in the mutation.
func (m *ActionMutation) Mode() (r string, exists bool) {
	v := m.mode
	if v == nil {
		return
	}
	return *v, true
}

// OldMode returns the old mode value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMode: %w", err)
	}
	return oldValue.Mode, nil
}

// ResetMode reset all changes of the "mode" field.
func (m *ActionMutation) ResetMode() {
	m.mode = nil
}

// SetArgs sets the args field.
func (m *ActionMutation) SetArgs(s string) {
	m.args = &s
}

// Args returns the args value in the mutation.
func (m *ActionMutation) Args() (r string, exists bool) {
	v := m.args
	if v == nil {
		return
	}
	return *v, true
}

// OldArgs returns the old args value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldArgs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldArgs is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldArgs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArgs: %w", err)
	}
	return oldValue.Args, nil
}

// ResetArgs reset all changes of the "args" field.
func (m *ActionMutation) ResetArgs() {
	m.args = nil
}

// SetQueued sets the queued field.
func (m *ActionMutation) SetQueued(b bool) {
	m.queued = &b
}

// Queued returns the queued value in the mutation.
func (m *ActionMutation) Queued() (r bool, exists bool) {
	v := m.queued
	if v == nil {
		return
	}
	return *v, true
}

// OldQueued returns the old queued value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldQueued(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQueued is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQueued requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQueued: %w", err)
	}
	return oldValue.Queued, nil
}

// ResetQueued reset all changes of the "queued" field.
func (m *ActionMutation) ResetQueued() {
	m.queued = nil
}

// SetResponded sets the responded field.
func (m *ActionMutation) SetResponded(b bool) {
	m.responded = &b
}

// Responded returns the responded value in the mutation.
func (m *ActionMutation) Responded() (r bool, exists bool) {
	v := m.responded
	if v == nil {
		return
	}
	return *v, true
}

// OldResponded returns the old responded value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldResponded(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResponded is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResponded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponded: %w", err)
	}
	return oldValue.Responded, nil
}

// ResetResponded reset all changes of the "responded" field.
func (m *ActionMutation) ResetResponded() {
	m.responded = nil
}

// SetResult sets the result field.
func (m *ActionMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the result value in the mutation.
func (m *ActionMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old result value of the Action.
// If the Action object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActionMutation) OldResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResult is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult reset all changes of the "result" field.
func (m *ActionMutation) ResetResult() {
	m.result = nil
}

// AddTargetingIDs adds the targeting edge to Host by ids.
func (m *ActionMutation) AddTargetingIDs(ids ...int) {
	if m.targeting == nil {
		m.targeting = make(map[int]struct{})
	}
	for i := range ids {
		m.targeting[ids[i]] = struct{}{}
	}
}

// RemoveTargetingIDs removes the targeting edge to Host by ids.
func (m *ActionMutation) RemoveTargetingIDs(ids ...int) {
	if m.removedtargeting == nil {
		m.removedtargeting = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtargeting[ids[i]] = struct{}{}
	}
}

// RemovedTargeting returns the removed ids of targeting.
func (m *ActionMutation) RemovedTargetingIDs() (ids []int) {
	for id := range m.removedtargeting {
		ids = append(ids, id)
	}
	return
}

// TargetingIDs returns the targeting ids in the mutation.
func (m *ActionMutation) TargetingIDs() (ids []int) {
	for id := range m.targeting {
		ids = append(ids, id)
	}
	return
}

// ResetTargeting reset all changes of the "targeting" edge.
func (m *ActionMutation) ResetTargeting() {
	m.targeting = nil
	m.removedtargeting = nil
}

// Op returns the operation name.
func (m *ActionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Action).
func (m *ActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ActionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.uuid != nil {
		fields = append(fields, action.FieldUUID)
	}
	if m.mode != nil {
		fields = append(fields, action.FieldMode)
	}
	if m.args != nil {
		fields = append(fields, action.FieldArgs)
	}
	if m.queued != nil {
		fields = append(fields, action.FieldQueued)
	}
	if m.responded != nil {
		fields = append(fields, action.FieldResponded)
	}
	if m.result != nil {
		fields = append(fields, action.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case action.FieldUUID:
		return m.UUID()
	case action.FieldMode:
		return m.Mode()
	case action.FieldArgs:
		return m.Args()
	case action.FieldQueued:
		return m.Queued()
	case action.FieldResponded:
		return m.Responded()
	case action.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case action.FieldUUID:
		return m.OldUUID(ctx)
	case action.FieldMode:
		return m.OldMode(ctx)
	case action.FieldArgs:
		return m.OldArgs(ctx)
	case action.FieldQueued:
		return m.OldQueued(ctx)
	case action.FieldResponded:
		return m.OldResponded(ctx)
	case action.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown Action field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case action.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case action.FieldMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMode(v)
		return nil
	case action.FieldArgs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArgs(v)
		return nil
	case action.FieldQueued:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQueued(v)
		return nil
	case action.FieldResponded:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponded(v)
		return nil
	case action.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown Action field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ActionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ActionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Action numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Action nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ActionMutation) ResetField(name string) error {
	switch name {
	case action.FieldUUID:
		m.ResetUUID()
		return nil
	case action.FieldMode:
		m.ResetMode()
		return nil
	case action.FieldArgs:
		m.ResetArgs()
		return nil
	case action.FieldQueued:
		m.ResetQueued()
		return nil
	case action.FieldResponded:
		m.ResetResponded()
		return nil
	case action.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown Action field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.targeting != nil {
		edges = append(edges, action.EdgeTargeting)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ActionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case action.EdgeTargeting:
		ids := make([]ent.Value, 0, len(m.targeting))
		for id := range m.targeting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtargeting != nil {
		edges = append(edges, action.EdgeTargeting)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ActionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case action.EdgeTargeting:
		ids := make([]ent.Value, 0, len(m.removedtargeting))
		for id := range m.removedtargeting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ActionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ActionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Action unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ActionMutation) ResetEdge(name string) error {
	switch name {
	case action.EdgeTargeting:
		m.ResetTargeting()
		return nil
	}
	return fmt.Errorf("unknown Action edge %s", name)
}

// BotMutation represents an operation that mutate the Bots
// nodes in the graph.
type BotMutation struct {
	config
	op               Op
	typ              string
	id               *int
	uuid             *string
	interval         *int
	addinterval      *int
	delta            *int
	adddelta         *int
	lastSeen         *int
	addlastSeen      *int
	clearedFields    map[string]struct{}
	infecting        map[int]struct{}
	removedinfecting map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Bot, error)
}

var _ ent.Mutation = (*BotMutation)(nil)

// botOption allows to manage the mutation configuration using functional options.
type botOption func(*BotMutation)

// newBotMutation creates new mutation for $n.Name.
func newBotMutation(c config, op Op, opts ...botOption) *BotMutation {
	m := &BotMutation{
		config:        c,
		op:            op,
		typ:           TypeBot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBotID sets the id field of the mutation.
func withBotID(id int) botOption {
	return func(m *BotMutation) {
		var (
			err   error
			once  sync.Once
			value *Bot
		)
		m.oldValue = func(ctx context.Context) (*Bot, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBot sets the old Bot of the mutation.
func withBot(node *Bot) botOption {
	return func(m *BotMutation) {
		m.oldValue = func(context.Context) (*Bot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BotMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUUID sets the uuid field.
func (m *BotMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the uuid value in the mutation.
func (m *BotMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old uuid value of the Bot.
// If the Bot object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BotMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUUID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID reset all changes of the "uuid" field.
func (m *BotMutation) ResetUUID() {
	m.uuid = nil
}

// SetInterval sets the interval field.
func (m *BotMutation) SetInterval(i int) {
	m.interval = &i
	m.addinterval = nil
}

// Interval returns the interval value in the mutation.
func (m *BotMutation) Interval() (r int, exists bool) {
	v := m.interval
	if v == nil {
		return
	}
	return *v, true
}

// OldInterval returns the old interval value of the Bot.
// If the Bot object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BotMutation) OldInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInterval is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterval: %w", err)
	}
	return oldValue.Interval, nil
}

// AddInterval adds i to interval.
func (m *BotMutation) AddInterval(i int) {
	if m.addinterval != nil {
		*m.addinterval += i
	} else {
		m.addinterval = &i
	}
}

// AddedInterval returns the value that was added to the interval field in this mutation.
func (m *BotMutation) AddedInterval() (r int, exists bool) {
	v := m.addinterval
	if v == nil {
		return
	}
	return *v, true
}

// ResetInterval reset all changes of the "interval" field.
func (m *BotMutation) ResetInterval() {
	m.interval = nil
	m.addinterval = nil
}

// SetDelta sets the delta field.
func (m *BotMutation) SetDelta(i int) {
	m.delta = &i
	m.adddelta = nil
}

// Delta returns the delta value in the mutation.
func (m *BotMutation) Delta() (r int, exists bool) {
	v := m.delta
	if v == nil {
		return
	}
	return *v, true
}

// OldDelta returns the old delta value of the Bot.
// If the Bot object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BotMutation) OldDelta(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDelta is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDelta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDelta: %w", err)
	}
	return oldValue.Delta, nil
}

// AddDelta adds i to delta.
func (m *BotMutation) AddDelta(i int) {
	if m.adddelta != nil {
		*m.adddelta += i
	} else {
		m.adddelta = &i
	}
}

// AddedDelta returns the value that was added to the delta field in this mutation.
func (m *BotMutation) AddedDelta() (r int, exists bool) {
	v := m.adddelta
	if v == nil {
		return
	}
	return *v, true
}

// ResetDelta reset all changes of the "delta" field.
func (m *BotMutation) ResetDelta() {
	m.delta = nil
	m.adddelta = nil
}

// SetLastSeen sets the lastSeen field.
func (m *BotMutation) SetLastSeen(i int) {
	m.lastSeen = &i
	m.addlastSeen = nil
}

// LastSeen returns the lastSeen value in the mutation.
func (m *BotMutation) LastSeen() (r int, exists bool) {
	v := m.lastSeen
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeen returns the old lastSeen value of the Bot.
// If the Bot object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BotMutation) OldLastSeen(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastSeen is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeen: %w", err)
	}
	return oldValue.LastSeen, nil
}

// AddLastSeen adds i to lastSeen.
func (m *BotMutation) AddLastSeen(i int) {
	if m.addlastSeen != nil {
		*m.addlastSeen += i
	} else {
		m.addlastSeen = &i
	}
}

// AddedLastSeen returns the value that was added to the lastSeen field in this mutation.
func (m *BotMutation) AddedLastSeen() (r int, exists bool) {
	v := m.addlastSeen
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastSeen reset all changes of the "lastSeen" field.
func (m *BotMutation) ResetLastSeen() {
	m.lastSeen = nil
	m.addlastSeen = nil
}

// AddInfectingIDs adds the infecting edge to Host by ids.
func (m *BotMutation) AddInfectingIDs(ids ...int) {
	if m.infecting == nil {
		m.infecting = make(map[int]struct{})
	}
	for i := range ids {
		m.infecting[ids[i]] = struct{}{}
	}
}

// RemoveInfectingIDs removes the infecting edge to Host by ids.
func (m *BotMutation) RemoveInfectingIDs(ids ...int) {
	if m.removedinfecting == nil {
		m.removedinfecting = make(map[int]struct{})
	}
	for i := range ids {
		m.removedinfecting[ids[i]] = struct{}{}
	}
}

// RemovedInfecting returns the removed ids of infecting.
func (m *BotMutation) RemovedInfectingIDs() (ids []int) {
	for id := range m.removedinfecting {
		ids = append(ids, id)
	}
	return
}

// InfectingIDs returns the infecting ids in the mutation.
func (m *BotMutation) InfectingIDs() (ids []int) {
	for id := range m.infecting {
		ids = append(ids, id)
	}
	return
}

// ResetInfecting reset all changes of the "infecting" edge.
func (m *BotMutation) ResetInfecting() {
	m.infecting = nil
	m.removedinfecting = nil
}

// Op returns the operation name.
func (m *BotMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bot).
func (m *BotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BotMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.uuid != nil {
		fields = append(fields, bot.FieldUUID)
	}
	if m.interval != nil {
		fields = append(fields, bot.FieldInterval)
	}
	if m.delta != nil {
		fields = append(fields, bot.FieldDelta)
	}
	if m.lastSeen != nil {
		fields = append(fields, bot.FieldLastSeen)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bot.FieldUUID:
		return m.UUID()
	case bot.FieldInterval:
		return m.Interval()
	case bot.FieldDelta:
		return m.Delta()
	case bot.FieldLastSeen:
		return m.LastSeen()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bot.FieldUUID:
		return m.OldUUID(ctx)
	case bot.FieldInterval:
		return m.OldInterval(ctx)
	case bot.FieldDelta:
		return m.OldDelta(ctx)
	case bot.FieldLastSeen:
		return m.OldLastSeen(ctx)
	}
	return nil, fmt.Errorf("unknown Bot field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bot.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case bot.FieldInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterval(v)
		return nil
	case bot.FieldDelta:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDelta(v)
		return nil
	case bot.FieldLastSeen:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeen(v)
		return nil
	}
	return fmt.Errorf("unknown Bot field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BotMutation) AddedFields() []string {
	var fields []string
	if m.addinterval != nil {
		fields = append(fields, bot.FieldInterval)
	}
	if m.adddelta != nil {
		fields = append(fields, bot.FieldDelta)
	}
	if m.addlastSeen != nil {
		fields = append(fields, bot.FieldLastSeen)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BotMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bot.FieldInterval:
		return m.AddedInterval()
	case bot.FieldDelta:
		return m.AddedDelta()
	case bot.FieldLastSeen:
		return m.AddedLastSeen()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BotMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bot.FieldInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInterval(v)
		return nil
	case bot.FieldDelta:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDelta(v)
		return nil
	case bot.FieldLastSeen:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastSeen(v)
		return nil
	}
	return fmt.Errorf("unknown Bot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BotMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BotMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bot nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BotMutation) ResetField(name string) error {
	switch name {
	case bot.FieldUUID:
		m.ResetUUID()
		return nil
	case bot.FieldInterval:
		m.ResetInterval()
		return nil
	case bot.FieldDelta:
		m.ResetDelta()
		return nil
	case bot.FieldLastSeen:
		m.ResetLastSeen()
		return nil
	}
	return fmt.Errorf("unknown Bot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BotMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.infecting != nil {
		edges = append(edges, bot.EdgeInfecting)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BotMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bot.EdgeInfecting:
		ids := make([]ent.Value, 0, len(m.infecting))
		for id := range m.infecting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedinfecting != nil {
		edges = append(edges, bot.EdgeInfecting)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BotMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bot.EdgeInfecting:
		ids := make([]ent.Value, 0, len(m.removedinfecting))
		for id := range m.removedinfecting {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BotMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BotMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bot unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BotMutation) ResetEdge(name string) error {
	switch name {
	case bot.EdgeInfecting:
		m.ResetInfecting()
		return nil
	}
	return fmt.Errorf("unknown Bot edge %s", name)
}

// GroupMutation represents an operation that mutate the Groups
// nodes in the graph.
type GroupMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	desc           *string
	clearedFields  map[string]struct{}
	members        map[int]struct{}
	removedmembers map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Group, error)
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows to manage the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for $n.Name.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the id field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Group.
// If the Group object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDesc sets the desc field.
func (m *GroupMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the desc value in the mutation.
func (m *GroupMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old desc value of the Group.
// If the Group object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GroupMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDesc is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc reset all changes of the "desc" field.
func (m *GroupMutation) ResetDesc() {
	m.desc = nil
}

// AddMemberIDs adds the members edge to Host by ids.
func (m *GroupMutation) AddMemberIDs(ids ...int) {
	if m.members == nil {
		m.members = make(map[int]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// RemoveMemberIDs removes the members edge to Host by ids.
func (m *GroupMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed ids of members.
func (m *GroupMutation) RemovedMembersIDs() (ids []int) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the members ids in the mutation.
func (m *GroupMutation) MembersIDs() (ids []int) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers reset all changes of the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.removedmembers = nil
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.desc != nil {
		fields = append(fields, group.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// HostMutation represents an operation that mutate the Hosts
// nodes in the graph.
type HostMutation struct {
	config
	op             Op
	typ            string
	id             *int
	hostname       *string
	_interface     *string
	lastSeen       *int
	addlastSeen    *int
	clearedFields  map[string]struct{}
	bots           map[int]struct{}
	removedbots    map[int]struct{}
	actions        map[int]struct{}
	removedactions map[int]struct{}
	member         map[int]struct{}
	removedmember  map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Host, error)
}

var _ ent.Mutation = (*HostMutation)(nil)

// hostOption allows to manage the mutation configuration using functional options.
type hostOption func(*HostMutation)

// newHostMutation creates new mutation for $n.Name.
func newHostMutation(c config, op Op, opts ...hostOption) *HostMutation {
	m := &HostMutation{
		config:        c,
		op:            op,
		typ:           TypeHost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostID sets the id field of the mutation.
func withHostID(id int) hostOption {
	return func(m *HostMutation) {
		var (
			err   error
			once  sync.Once
			value *Host
		)
		m.oldValue = func(ctx context.Context) (*Host, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Host.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHost sets the old Host of the mutation.
func withHost(node *Host) hostOption {
	return func(m *HostMutation) {
		m.oldValue = func(context.Context) (*Host, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *HostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHostname sets the hostname field.
func (m *HostMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the hostname value in the mutation.
func (m *HostMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old hostname value of the Host.
// If the Host object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *HostMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHostname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ResetHostname reset all changes of the "hostname" field.
func (m *HostMutation) ResetHostname() {
	m.hostname = nil
}

// SetInterface sets the interface field.
func (m *HostMutation) SetInterface(s string) {
	m._interface = &s
}

// Interface returns the interface value in the mutation.
func (m *HostMutation) Interface() (r string, exists bool) {
	v := m._interface
	if v == nil {
		return
	}
	return *v, true
}

// OldInterface returns the old interface value of the Host.
// If the Host object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *HostMutation) OldInterface(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInterface is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInterface requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterface: %w", err)
	}
	return oldValue.Interface, nil
}

// ResetInterface reset all changes of the "interface" field.
func (m *HostMutation) ResetInterface() {
	m._interface = nil
}

// SetLastSeen sets the lastSeen field.
func (m *HostMutation) SetLastSeen(i int) {
	m.lastSeen = &i
	m.addlastSeen = nil
}

// LastSeen returns the lastSeen value in the mutation.
func (m *HostMutation) LastSeen() (r int, exists bool) {
	v := m.lastSeen
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeen returns the old lastSeen value of the Host.
// If the Host object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *HostMutation) OldLastSeen(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastSeen is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeen: %w", err)
	}
	return oldValue.LastSeen, nil
}

// AddLastSeen adds i to lastSeen.
func (m *HostMutation) AddLastSeen(i int) {
	if m.addlastSeen != nil {
		*m.addlastSeen += i
	} else {
		m.addlastSeen = &i
	}
}

// AddedLastSeen returns the value that was added to the lastSeen field in this mutation.
func (m *HostMutation) AddedLastSeen() (r int, exists bool) {
	v := m.addlastSeen
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastSeen reset all changes of the "lastSeen" field.
func (m *HostMutation) ResetLastSeen() {
	m.lastSeen = nil
	m.addlastSeen = nil
}

// AddBotIDs adds the bots edge to Bot by ids.
func (m *HostMutation) AddBotIDs(ids ...int) {
	if m.bots == nil {
		m.bots = make(map[int]struct{})
	}
	for i := range ids {
		m.bots[ids[i]] = struct{}{}
	}
}

// RemoveBotIDs removes the bots edge to Bot by ids.
func (m *HostMutation) RemoveBotIDs(ids ...int) {
	if m.removedbots == nil {
		m.removedbots = make(map[int]struct{})
	}
	for i := range ids {
		m.removedbots[ids[i]] = struct{}{}
	}
}

// RemovedBots returns the removed ids of bots.
func (m *HostMutation) RemovedBotsIDs() (ids []int) {
	for id := range m.removedbots {
		ids = append(ids, id)
	}
	return
}

// BotsIDs returns the bots ids in the mutation.
func (m *HostMutation) BotsIDs() (ids []int) {
	for id := range m.bots {
		ids = append(ids, id)
	}
	return
}

// ResetBots reset all changes of the "bots" edge.
func (m *HostMutation) ResetBots() {
	m.bots = nil
	m.removedbots = nil
}

// AddActionIDs adds the actions edge to Action by ids.
func (m *HostMutation) AddActionIDs(ids ...int) {
	if m.actions == nil {
		m.actions = make(map[int]struct{})
	}
	for i := range ids {
		m.actions[ids[i]] = struct{}{}
	}
}

// RemoveActionIDs removes the actions edge to Action by ids.
func (m *HostMutation) RemoveActionIDs(ids ...int) {
	if m.removedactions == nil {
		m.removedactions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedactions[ids[i]] = struct{}{}
	}
}

// RemovedActions returns the removed ids of actions.
func (m *HostMutation) RemovedActionsIDs() (ids []int) {
	for id := range m.removedactions {
		ids = append(ids, id)
	}
	return
}

// ActionsIDs returns the actions ids in the mutation.
func (m *HostMutation) ActionsIDs() (ids []int) {
	for id := range m.actions {
		ids = append(ids, id)
	}
	return
}

// ResetActions reset all changes of the "actions" edge.
func (m *HostMutation) ResetActions() {
	m.actions = nil
	m.removedactions = nil
}

// AddMemberIDs adds the member edge to Group by ids.
func (m *HostMutation) AddMemberIDs(ids ...int) {
	if m.member == nil {
		m.member = make(map[int]struct{})
	}
	for i := range ids {
		m.member[ids[i]] = struct{}{}
	}
}

// RemoveMemberIDs removes the member edge to Group by ids.
func (m *HostMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmember == nil {
		m.removedmember = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmember[ids[i]] = struct{}{}
	}
}

// RemovedMember returns the removed ids of member.
func (m *HostMutation) RemovedMemberIDs() (ids []int) {
	for id := range m.removedmember {
		ids = append(ids, id)
	}
	return
}

// MemberIDs returns the member ids in the mutation.
func (m *HostMutation) MemberIDs() (ids []int) {
	for id := range m.member {
		ids = append(ids, id)
	}
	return
}

// ResetMember reset all changes of the "member" edge.
func (m *HostMutation) ResetMember() {
	m.member = nil
	m.removedmember = nil
}

// Op returns the operation name.
func (m *HostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Host).
func (m *HostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *HostMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hostname != nil {
		fields = append(fields, host.FieldHostname)
	}
	if m._interface != nil {
		fields = append(fields, host.FieldInterface)
	}
	if m.lastSeen != nil {
		fields = append(fields, host.FieldLastSeen)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *HostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case host.FieldHostname:
		return m.Hostname()
	case host.FieldInterface:
		return m.Interface()
	case host.FieldLastSeen:
		return m.LastSeen()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *HostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case host.FieldHostname:
		return m.OldHostname(ctx)
	case host.FieldInterface:
		return m.OldInterface(ctx)
	case host.FieldLastSeen:
		return m.OldLastSeen(ctx)
	}
	return nil, fmt.Errorf("unknown Host field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *HostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case host.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case host.FieldInterface:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterface(v)
		return nil
	case host.FieldLastSeen:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeen(v)
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *HostMutation) AddedFields() []string {
	var fields []string
	if m.addlastSeen != nil {
		fields = append(fields, host.FieldLastSeen)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *HostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case host.FieldLastSeen:
		return m.AddedLastSeen()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *HostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case host.FieldLastSeen:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastSeen(v)
		return nil
	}
	return fmt.Errorf("unknown Host numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *HostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *HostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Host nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *HostMutation) ResetField(name string) error {
	switch name {
	case host.FieldHostname:
		m.ResetHostname()
		return nil
	case host.FieldInterface:
		m.ResetInterface()
		return nil
	case host.FieldLastSeen:
		m.ResetLastSeen()
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *HostMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.bots != nil {
		edges = append(edges, host.EdgeBots)
	}
	if m.actions != nil {
		edges = append(edges, host.EdgeActions)
	}
	if m.member != nil {
		edges = append(edges, host.EdgeMember)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *HostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case host.EdgeBots:
		ids := make([]ent.Value, 0, len(m.bots))
		for id := range m.bots {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeActions:
		ids := make([]ent.Value, 0, len(m.actions))
		for id := range m.actions {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeMember:
		ids := make([]ent.Value, 0, len(m.member))
		for id := range m.member {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *HostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedbots != nil {
		edges = append(edges, host.EdgeBots)
	}
	if m.removedactions != nil {
		edges = append(edges, host.EdgeActions)
	}
	if m.removedmember != nil {
		edges = append(edges, host.EdgeMember)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *HostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case host.EdgeBots:
		ids := make([]ent.Value, 0, len(m.removedbots))
		for id := range m.removedbots {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeActions:
		ids := make([]ent.Value, 0, len(m.removedactions))
		for id := range m.removedactions {
			ids = append(ids, id)
		}
		return ids
	case host.EdgeMember:
		ids := make([]ent.Value, 0, len(m.removedmember))
		for id := range m.removedmember {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *HostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *HostMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *HostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Host unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *HostMutation) ResetEdge(name string) error {
	switch name {
	case host.EdgeBots:
		m.ResetBots()
		return nil
	case host.EdgeActions:
		m.ResetActions()
		return nil
	case host.EdgeMember:
		m.ResetMember()
		return nil
	}
	return fmt.Errorf("unknown Host edge %s", name)
}
