// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/degenerat3/meteor/meteor/core/ent/bot"
	"github.com/degenerat3/meteor/meteor/core/ent/host"
	"github.com/facebook/ent/dialect/sql"
)

// Bot is the model entity for the Bot schema.
type Bot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Interval holds the value of the "interval" field.
	Interval int `json:"interval,omitempty"`
	// Delta holds the value of the "delta" field.
	Delta int `json:"delta,omitempty"`
	// LastSeen holds the value of the "lastSeen" field.
	LastSeen int `json:"lastSeen,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BotQuery when eager-loading is set.
	Edges     BotEdges `json:"edges"`
	host_bots *int
}

// BotEdges holds the relations/edges for other nodes in the graph.
type BotEdges struct {
	// Infecting holds the value of the infecting edge.
	Infecting *Host
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InfectingOrErr returns the Infecting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BotEdges) InfectingOrErr() (*Host, error) {
	if e.loadedTypes[0] {
		if e.Infecting == nil {
			// The edge infecting was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.Infecting, nil
	}
	return nil, &NotLoadedError{edge: "infecting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bot) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // uuid
		&sql.NullInt64{},  // interval
		&sql.NullInt64{},  // delta
		&sql.NullInt64{},  // lastSeen
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bot) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // host_bots
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bot fields.
func (b *Bot) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bot.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field uuid", values[0])
	} else if value.Valid {
		b.UUID = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field interval", values[1])
	} else if value.Valid {
		b.Interval = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field delta", values[2])
	} else if value.Valid {
		b.Delta = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field lastSeen", values[3])
	} else if value.Valid {
		b.LastSeen = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(bot.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field host_bots", value)
		} else if value.Valid {
			b.host_bots = new(int)
			*b.host_bots = int(value.Int64)
		}
	}
	return nil
}

// QueryInfecting queries the infecting edge of the Bot.
func (b *Bot) QueryInfecting() *HostQuery {
	return (&BotClient{config: b.config}).QueryInfecting(b)
}

// Update returns a builder for updating this Bot.
// Note that, you need to call Bot.Unwrap() before calling this method, if this Bot
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bot) Update() *BotUpdateOne {
	return (&BotClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bot) Unwrap() *Bot {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bot is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bot) String() string {
	var builder strings.Builder
	builder.WriteString("Bot(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(b.UUID)
	builder.WriteString(", interval=")
	builder.WriteString(fmt.Sprintf("%v", b.Interval))
	builder.WriteString(", delta=")
	builder.WriteString(fmt.Sprintf("%v", b.Delta))
	builder.WriteString(", lastSeen=")
	builder.WriteString(fmt.Sprintf("%v", b.LastSeen))
	builder.WriteByte(')')
	return builder.String()
}

// Bots is a parsable slice of Bot.
type Bots []*Bot

func (b Bots) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
