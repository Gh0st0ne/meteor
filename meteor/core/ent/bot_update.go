// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/degenerat3/meteor/meteor/core/ent/bot"
	"github.com/degenerat3/meteor/meteor/core/ent/host"
	"github.com/degenerat3/meteor/meteor/core/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BotUpdate is the builder for updating Bot entities.
type BotUpdate struct {
	config
	hooks      []Hook
	mutation   *BotMutation
	predicates []predicate.Bot
}

// Where adds a new predicate for the builder.
func (bu *BotUpdate) Where(ps ...predicate.Bot) *BotUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetUUID sets the uuid field.
func (bu *BotUpdate) SetUUID(s string) *BotUpdate {
	bu.mutation.SetUUID(s)
	return bu
}

// SetInterval sets the interval field.
func (bu *BotUpdate) SetInterval(i int) *BotUpdate {
	bu.mutation.ResetInterval()
	bu.mutation.SetInterval(i)
	return bu
}

// AddInterval adds i to interval.
func (bu *BotUpdate) AddInterval(i int) *BotUpdate {
	bu.mutation.AddInterval(i)
	return bu
}

// SetDelta sets the delta field.
func (bu *BotUpdate) SetDelta(i int) *BotUpdate {
	bu.mutation.ResetDelta()
	bu.mutation.SetDelta(i)
	return bu
}

// AddDelta adds i to delta.
func (bu *BotUpdate) AddDelta(i int) *BotUpdate {
	bu.mutation.AddDelta(i)
	return bu
}

// SetLastSeen sets the lastSeen field.
func (bu *BotUpdate) SetLastSeen(i int) *BotUpdate {
	bu.mutation.ResetLastSeen()
	bu.mutation.SetLastSeen(i)
	return bu
}

// AddLastSeen adds i to lastSeen.
func (bu *BotUpdate) AddLastSeen(i int) *BotUpdate {
	bu.mutation.AddLastSeen(i)
	return bu
}

// AddInfectingIDs adds the infecting edge to Host by ids.
func (bu *BotUpdate) AddInfectingIDs(ids ...int) *BotUpdate {
	bu.mutation.AddInfectingIDs(ids...)
	return bu
}

// AddInfecting adds the infecting edges to Host.
func (bu *BotUpdate) AddInfecting(h ...*Host) *BotUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return bu.AddInfectingIDs(ids...)
}

// Mutation returns the BotMutation object of the builder.
func (bu *BotUpdate) Mutation() *BotMutation {
	return bu.mutation
}

// RemoveInfectingIDs removes the infecting edge to Host by ids.
func (bu *BotUpdate) RemoveInfectingIDs(ids ...int) *BotUpdate {
	bu.mutation.RemoveInfectingIDs(ids...)
	return bu
}

// RemoveInfecting removes infecting edges to Host.
func (bu *BotUpdate) RemoveInfecting(h ...*Host) *BotUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return bu.RemoveInfectingIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BotUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.Interval(); ok {
		if err := bot.IntervalValidator(v); err != nil {
			return 0, &ValidationError{Name: "interval", err: fmt.Errorf("ent: validator failed for field \"interval\": %w", err)}
		}
	}
	if v, ok := bu.mutation.Delta(); ok {
		if err := bot.DeltaValidator(v); err != nil {
			return 0, &ValidationError{Name: "delta", err: fmt.Errorf("ent: validator failed for field \"delta\": %w", err)}
		}
	}
	if v, ok := bu.mutation.LastSeen(); ok {
		if err := bot.LastSeenValidator(v); err != nil {
			return 0, &ValidationError{Name: "lastSeen", err: fmt.Errorf("ent: validator failed for field \"lastSeen\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BotUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BotUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BotUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bot.Table,
			Columns: bot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bot.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bot.FieldUUID,
		})
	}
	if value, ok := bu.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldInterval,
		})
	}
	if value, ok := bu.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldInterval,
		})
	}
	if value, ok := bu.mutation.Delta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldDelta,
		})
	}
	if value, ok := bu.mutation.AddedDelta(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldDelta,
		})
	}
	if value, ok := bu.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldLastSeen,
		})
	}
	if value, ok := bu.mutation.AddedLastSeen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldLastSeen,
		})
	}
	if nodes := bu.mutation.RemovedInfectingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bot.InfectingTable,
			Columns: bot.InfectingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.InfectingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bot.InfectingTable,
			Columns: bot.InfectingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BotUpdateOne is the builder for updating a single Bot entity.
type BotUpdateOne struct {
	config
	hooks    []Hook
	mutation *BotMutation
}

// SetUUID sets the uuid field.
func (buo *BotUpdateOne) SetUUID(s string) *BotUpdateOne {
	buo.mutation.SetUUID(s)
	return buo
}

// SetInterval sets the interval field.
func (buo *BotUpdateOne) SetInterval(i int) *BotUpdateOne {
	buo.mutation.ResetInterval()
	buo.mutation.SetInterval(i)
	return buo
}

// AddInterval adds i to interval.
func (buo *BotUpdateOne) AddInterval(i int) *BotUpdateOne {
	buo.mutation.AddInterval(i)
	return buo
}

// SetDelta sets the delta field.
func (buo *BotUpdateOne) SetDelta(i int) *BotUpdateOne {
	buo.mutation.ResetDelta()
	buo.mutation.SetDelta(i)
	return buo
}

// AddDelta adds i to delta.
func (buo *BotUpdateOne) AddDelta(i int) *BotUpdateOne {
	buo.mutation.AddDelta(i)
	return buo
}

// SetLastSeen sets the lastSeen field.
func (buo *BotUpdateOne) SetLastSeen(i int) *BotUpdateOne {
	buo.mutation.ResetLastSeen()
	buo.mutation.SetLastSeen(i)
	return buo
}

// AddLastSeen adds i to lastSeen.
func (buo *BotUpdateOne) AddLastSeen(i int) *BotUpdateOne {
	buo.mutation.AddLastSeen(i)
	return buo
}

// AddInfectingIDs adds the infecting edge to Host by ids.
func (buo *BotUpdateOne) AddInfectingIDs(ids ...int) *BotUpdateOne {
	buo.mutation.AddInfectingIDs(ids...)
	return buo
}

// AddInfecting adds the infecting edges to Host.
func (buo *BotUpdateOne) AddInfecting(h ...*Host) *BotUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return buo.AddInfectingIDs(ids...)
}

// Mutation returns the BotMutation object of the builder.
func (buo *BotUpdateOne) Mutation() *BotMutation {
	return buo.mutation
}

// RemoveInfectingIDs removes the infecting edge to Host by ids.
func (buo *BotUpdateOne) RemoveInfectingIDs(ids ...int) *BotUpdateOne {
	buo.mutation.RemoveInfectingIDs(ids...)
	return buo
}

// RemoveInfecting removes infecting edges to Host.
func (buo *BotUpdateOne) RemoveInfecting(h ...*Host) *BotUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return buo.RemoveInfectingIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BotUpdateOne) Save(ctx context.Context) (*Bot, error) {
	if v, ok := buo.mutation.Interval(); ok {
		if err := bot.IntervalValidator(v); err != nil {
			return nil, &ValidationError{Name: "interval", err: fmt.Errorf("ent: validator failed for field \"interval\": %w", err)}
		}
	}
	if v, ok := buo.mutation.Delta(); ok {
		if err := bot.DeltaValidator(v); err != nil {
			return nil, &ValidationError{Name: "delta", err: fmt.Errorf("ent: validator failed for field \"delta\": %w", err)}
		}
	}
	if v, ok := buo.mutation.LastSeen(); ok {
		if err := bot.LastSeenValidator(v); err != nil {
			return nil, &ValidationError{Name: "lastSeen", err: fmt.Errorf("ent: validator failed for field \"lastSeen\": %w", err)}
		}
	}

	var (
		err  error
		node *Bot
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BotUpdateOne) SaveX(ctx context.Context) *Bot {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BotUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BotUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BotUpdateOne) sqlSave(ctx context.Context) (b *Bot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bot.Table,
			Columns: bot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bot.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bot.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bot.FieldUUID,
		})
	}
	if value, ok := buo.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldInterval,
		})
	}
	if value, ok := buo.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldInterval,
		})
	}
	if value, ok := buo.mutation.Delta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldDelta,
		})
	}
	if value, ok := buo.mutation.AddedDelta(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldDelta,
		})
	}
	if value, ok := buo.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldLastSeen,
		})
	}
	if value, ok := buo.mutation.AddedLastSeen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bot.FieldLastSeen,
		})
	}
	if nodes := buo.mutation.RemovedInfectingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bot.InfectingTable,
			Columns: bot.InfectingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.InfectingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bot.InfectingTable,
			Columns: bot.InfectingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bot{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
